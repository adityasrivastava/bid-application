version: '3.7'
networks:
  backend:
    name: app
    driver: bridge
volumes:
  postgres-data:
# Define services
services:
  # App backend service
  app:
    image: bid-application:latest
    # Give the container the name web-app. You can changes to something else.
    container_name: web-app
    # Forward the exposed port 8080 on the container to port 8080 on the host machine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DB_URL: jdbc:postgresql://db/testdb1
    ports:
      - "8080:8080"
    networks:
      - backend
    # This service depends on postgres. Start that first.
    depends_on:
      - db
    # Service health check
    healthcheck:
      test: curl -f http://localhost:8080/check || exit 1
      interval: 1m
      timeout: 10s
      retries: 2
  # Database Service (Postgres)
  db:
    # Use the Docker Image postgres. This will pull the 12 version.
    image: bid-postgres:10.14
    # Give the container the name postgres-db. You can changes to something else.
    container_name: bid-postgres1
    restart: always
    # Set a volume some that database is not lost after shutting down the container.
    # I used the name postgres-data but you can changed it to something else.
    volumes:
#      - postgres-data:/var/lib/postgresql/data
      - ./db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    # Maps port 5432 (localhost) to port 5432 on the container. You can change the ports to fix your needs.
    ports:
      - "5432:5432"
    # Setup the username, password, and database name. You can changes these values.
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb1
      PGDATA: /var/lib/postgresql/data/pgdata
    # Service health check
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m
      timeout: 10s
      retries: 2